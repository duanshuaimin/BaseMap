{"remainingRequest":"/Users/liangma/Desktop/workspace/BaseMap/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/liangma/Desktop/workspace/BaseMap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liangma/Desktop/workspace/BaseMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liangma/Desktop/workspace/BaseMap/src/components/editor-settings.vue?vue&type=template&id=7cc9f123&scoped=true&","dependencies":[{"path":"/Users/liangma/Desktop/workspace/BaseMap/src/components/editor-settings.vue","mtime":1589124374956},{"path":"/Users/liangma/Desktop/workspace/BaseMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangma/Desktop/workspace/BaseMap/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/liangma/Desktop/workspace/BaseMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liangma/Desktop/workspace/BaseMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}